<?php namespace ScheduleGuru\Events;use ScheduleGuru\Students\Student;class TutorSessionEventRepository {    protected $packageStudentID;    /**     * @param $convertEvents     * @param $studentID     * @return TutoringPackage     */    public function convertExistingEventsToPackage($convertEvents, $studentID)    {        TutoringPackage::unguard();        $package = TutoringPackage::updateOrCreate(['student_id' => $studentID]);        $pkgid = $package->id;        foreach($convertEvents->events as $event)        {            \Debugbar::info('---DEBUGGIN----');            \Debugbar::info($event);            if(!is_string($event))            {                $stu_id = $event->student_id;                $tutoringEvent = new ScheduledTutorSession;                $tutoringEvent->student_id  = $stu_id;                $tutoringEvent->gcal_event_id  = $event->gcal_event_id;                $tutoringEvent->gcal_event_ical_id  = $event->gcal_event_ical_id;                $tutoringEvent->gcal_event_etag  = $event->gcal_event_etag;                $tutoringEvent->gcal_html_link  = $event->gcal_html_link;                $tutoringEvent->session_type  = $event->session_type;                $tutoringEvent->test_type  = $event->test_type;                $tutoringEvent->tutor_id  = $event->tutor_unverified;                $tutoringEvent->location  = $event->location;                $tutoringEvent->package_id = $pkgid;                //TODO: actually make this a SQL indexed key relation betwixt package-id and their events                $tutoringEvent->gcal_status = $event->gcal_status;                $tutoringEvent->gcal_summary = $event->gcal_summary;                $tutoringEvent->save();                $this->applyPackageIDtoStudent($pkgid, $stu_id);            }            //grab the last student id, we will update the package with it        }//        $package->student_id = $packageStudentID;//        $package->push();        $package->reguard();        return $package;    }    public function applyPackageIDtoStudent($package_id, $student_id)    {        $student = Student::find($student_id);        $student->packageid = $package_id;        $student->save();    }    /**     * @param $sessionEvents     * @param $studentID     * @return static     */    public function dashConvertEventsToPackage($sessionEvents, $studentID)    {        TutoringPackage::unguard();        $package = TutoringPackage::updateOrCreate(['student_id' => $studentID]);        $pkgid = $package->id;        foreach($sessionEvents as $event)        {            $stu_id = $event['student_id'];            $tutoringEvent = new ScheduledTutorSession;            $tutoringEvent->student_id  = $stu_id;            $tutoringEvent->gcal_event_id  = $event['gcal_event_id'];            $tutoringEvent->gcal_event_ical_id  = $event['gcal_event_ical_id'];            $tutoringEvent->gcal_event_etag  = $event['gcal_event_etag'];            $tutoringEvent->gcal_html_link  = $event['gcal_html_link'];            $tutoringEvent->session_type  = $event['session_type'];            $tutoringEvent->test_type  = $event['test_type'];            $tutoringEvent->tutor_id  = $event['tutor_unverified'];            $tutoringEvent->location  = $event['location'];            $tutoringEvent->package_id = $pkgid;            //TODO: actually make this a SQL indexed key relation betwixt package-id and their events            $tutoringEvent->gcal_status = $event['start_time'];            $tutoringEvent->gcal_summary = $event['summary_raw'];            $tutoringEvent->save();            $this->applyPackageIDtoStudent($pkgid, $stu_id);            //grab the last student id, we will update the package with it        }//        $package->student_id = $packageStudentID;//        $package->push();        $package->reguard();        return $package;    }}